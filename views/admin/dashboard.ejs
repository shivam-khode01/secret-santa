<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <div class="container">
        <h1 class="text-center">Admin Dashboard</h1>

        <!-- Create New Group Section -->
        <div class="card mb-4">
            <div class="card-header">
                Create New Group
            </div>
            <div class="card-body">
                <form id="create-group-form">
                    <div class="form-row">
                        <div class="col-md-4">
                            <input type="text" class="form-control" id="group-name" placeholder="Group Name" required>
                        </div>
                        <div class="col-md-4">
                            <input type="text" class="form-control" id="group-code" placeholder="Group Code" required>
                        </div>
                        <div class="col-md-4">
                            <button type="submit" class="btn btn-primary btn-block">Create Group</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <!-- Users Without Group -->
        <div class="card mb-4">
            <div class="card-header">
                Users Without Group
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Secret Santa For</th>
                            <th>Secret Santa By</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="ungrouped-users">
                        <% users.filter(user => !user.group).forEach(user => { %>
                            <tr>
                                <td><%= user.name %></td>
                                <td><%= user.email %></td>
                                <td><%= user.santaFor ? user.santaFor.name : 'Not Assigned' %></td>
                                <td><%= 
                                    users.find(u => u.santaFor && u.santaFor._id.toString() === user._id.toString()) 
                                    ? users.find(u => u.santaFor && u.santaFor._id.toString() === user._id.toString()).name 
                                    : 'Not Assigned' 
                                %></td>
                                <td>
                                    <button class="btn btn-danger btn-sm delete-user" data-user-id="<%= user._id %>">Delete</button>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
                <button id="pair-ungrouped-btn" class="btn btn-warning btn-block">Pair Ungrouped Users</button>
            </div>
        </div>

        <!-- Groups Section -->
        <div class="card">
            <div class="card-header">
                Existing Groups
            </div>
            <div class="card-body">
                <% groups.forEach(group => { %>
                    <div class="card mb-3">
                        <div class="card-header d-flex justify-content-between align-items-center">
                           <b><%= group.name %> </b> 
                            <div>
                                <button class="btn btn-primary btn-sm pair-group-btn" data-group-id="<%= group._id %>">
                                    Pair Group
                                </button>
                                <button class="btn btn-danger btn-sm delete-group" data-group-id="<%= group._id %>">
                                    Delete Group
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <h6>Group Code: <%= group.code %></h6>
                            <h6>Members: <%= group.members.length %></h6>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Secret Santa For</th>
                                        <th>Secret Santa By</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% group.members.forEach(member => { %>
                                        <tr>
                                            <td><%= member.name %></td>
                                            <td><%= member.email %></td>
                                            <td><%= member.santaFor ? member.santaFor.name : 'Not Assigned' %></td>
                                            <td><%= 
                                                group.members.find(m => m.santaFor && m.santaFor._id.toString() === member._id.toString()) 
                                                ? group.members.find(m => m.santaFor && m.santaFor._id.toString() === member._id.toString()).name 
                                                : 'Not Assigned' 
                                            %></td>
                                            <td>
                                                <button class="btn btn-danger btn-sm remove-user-from-group" 
                                                    data-user-id="<%= member._id %>" 
                                                    data-group-id="<%= group._id %>">
                                                    Remove
                                                </button>
                                            </td>
                                        </tr>
                                    <% }) %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                <% }) %>
            </div>
        </div>
    </div>

    <script>
        // Create Group
        document.getElementById('create-group-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const name = document.getElementById('group-name').value;
            const code = document.getElementById('group-code').value;

            try {
                const response = await fetch('/admin/groups', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name, code })
                });

                const result = await response.json();
                if (response.ok) {
                    alert('Group created successfully');
                    location.reload();
                } else {
                    alert(result.error || 'Failed to create group');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred');
            }
        });

        // Pair Group
        document.querySelectorAll('.pair-group-btn').forEach(button => {
            button.addEventListener('click', async (event) => {
                const groupId = event.target.getAttribute('data-group-id');
                try {
                    const response = await fetch(`/admin/pair-group/${groupId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    
                    const result = await response.json();
                    
                    if (response.ok) {
                        alert('Group paired successfully!');
                        location.reload();
                    } else {
                        alert(result.error || 'Failed to pair group');
                    }
                } catch (error) {
                    console.error('Pairing error:', error);
                    alert('An error occurred while pairing the group');
                }
            });
        });

        // Delete Group
        document.querySelectorAll('.delete-group').forEach(button => {
            button.addEventListener('click', async (event) => {
                const groupId = event.target.getAttribute('data-group-id');
                if (confirm('Are you sure you want to delete this group?')) {
                    try {
                        const response = await fetch(`/admin/groups/${groupId}`, {
                            method: 'DELETE',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        
                        const result = await response.json();
                        
                        if (response.ok) {
                            alert('Group deleted successfully');
                            location.reload();
                        } else {
                            alert(result.error || 'Failed to delete group');
                        }
                    } catch (error) {
                        console.error('Delete error:', error);
                        alert('An error occurred while deleting the group');
                    }
                }
            });
        });

        // Remove User from Group
        document.querySelectorAll('.remove-user-from-group').forEach(button => {
            button.addEventListener('click', async (event) => {
                const userId = event.target.getAttribute('data-user-id');
                const groupId = event.target.getAttribute('data-group-id');
                
                if (confirm('Are you sure you want to remove this user from the group?')) {
                    try {
                        const response = await fetch(`/admin/remove-user-from-group`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ userId, groupId })
                        });
                        
                        const result = await response.json();
                        
                        if (response.ok) {
                            alert('User removed from group successfully');
                            location.reload();
                        } else {
                            alert(result.error || 'Failed to remove user from group');
                        }
                    } catch (error) {
                        console.error('Remove user error:', error);
                        alert('An error occurred while removing user from group');
                    }
                }
            });
        });

        // Pair Ungrouped Users
        document.getElementById('pair-ungrouped-btn').addEventListener('click', async () => {
            try {
                const response = await fetch('/admin/pair-ungrouped', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    alert('Ungrouped users paired successfully!');
                    location.reload();
                } else {
                    alert(result.error || 'Failed to pair ungrouped users');
                }
            } catch (error) {
                console.error('Pairing error:', error);
                alert('An error occurred while pairing ungrouped users');
            }
        });

        // Delete User
        document.querySelectorAll('.delete-user').forEach(button => {
            button.addEventListener('click', async (event) => {
                const userId = event.target.getAttribute('data-user-id');
                
                if (confirm('Are you sure you want to delete this user?')) {
                    try {
                        const response = await fetch(`/admin/users/${userId}`, {
                            method: 'DELETE',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        
                        const result = await response.json();
                        
                        if (response.ok) {
                            alert('User deleted successfully');
                            location.reload();
                        } else {
                            alert(result.error || 'Failed to delete user');
                        }
                    } catch (error) {
                        console.error('Delete user error:', error);
                        alert('An error occurred while deleting user');
                    }
                }
            });
        });
    </script>
</body>
</html>